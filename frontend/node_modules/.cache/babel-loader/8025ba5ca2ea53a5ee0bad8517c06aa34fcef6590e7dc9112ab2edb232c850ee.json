{"ast":null,"code":"import api from './api';\nexport const optimizacionService = {\n  async ejecutarOptimizacion() {\n    try {\n      console.log('Ejecutando optimización con Watson Studio (modelo OPL)...');\n      const response = await api.post('/optimizacion/ejecutar');\n      if (response.data.success) {\n        console.log('Optimización completada exitosamente con Watson Studio');\n        return response.data.data;\n      } else {\n        throw new Error(response.data.message || 'Error en la optimización');\n      }\n    } catch (error) {\n      console.error('Error al ejecutar optimización:', error);\n      throw error;\n    }\n  },\n  async obtenerDatosOptimizacion() {\n    try {\n      console.log('Obteniendo datos para optimización desde Cloud Object Storage...');\n      const response = await api.get('/optimizacion/datos');\n      if (response.data.success) {\n        return response.data.data;\n      } else {\n        throw new Error(response.data.message || 'Error al obtener datos');\n      }\n    } catch (error) {\n      console.error('Error al obtener datos de optimización:', error);\n      throw error;\n    }\n  },\n  async obtenerResultadosOptimizacion() {\n    try {\n      console.log('Obteniendo resultados de optimización...');\n      const response = await api.get('/optimizacion/resultados');\n      if (response.data.success) {\n        return response.data.data;\n      } else {\n        throw new Error(response.data.message || 'Error al obtener resultados');\n      }\n    } catch (error) {\n      console.error('Error al obtener resultados de optimización:', error);\n      throw error;\n    }\n  },\n  async probarConexionWatson() {\n    try {\n      console.log('Probando conexión con Watson Studio...');\n      const response = await api.get('/optimizacion/test-conexion');\n      return {\n        success: response.data.success,\n        message: response.data.message\n      };\n    } catch (error) {\n      console.error('Error al probar conexión con Watson Studio:', error);\n      return {\n        success: false,\n        message: 'Error al probar conexión con Watson Studio'\n      };\n    }\n  },\n  async lanzarJob() {\n    try {\n      console.log('Lanzando job de optimización en Watson Studio...');\n      const response = await api.post('/jobs/launch', {});\n      return {\n        success: response.data.success,\n        jobId: response.data.jobId,\n        status: response.data.status,\n        message: response.data.message\n      };\n    } catch (error) {\n      console.error('Error al lanzar job:', error);\n      throw error;\n    }\n  },\n  async consultarEstadoJob(jobId) {\n    try {\n      console.log(`Consultando estado del job: ${jobId}`);\n      const response = await api.get(`/jobs/status/${jobId}`);\n      return {\n        jobId: response.data.jobId,\n        status: response.data.status,\n        message: response.data.message\n      };\n    } catch (error) {\n      console.error('Error al consultar estado del job:', error);\n      throw error;\n    }\n  },\n  async obtenerResultadosJob(jobId) {\n    try {\n      console.log(`Obteniendo resultados del job: ${jobId}`);\n      const response = await api.get(`/jobs/results/${jobId}`);\n      if (response.data.success) {\n        return response.data.data;\n      } else {\n        throw new Error(response.data.message || 'Error al obtener resultados del job');\n      }\n    } catch (error) {\n      console.error('Error al obtener resultados del job:', error);\n      throw error;\n    }\n  },\n  async descargarResultados(assetId) {\n    try {\n      console.log(`Descargando resultados: ${assetId}`);\n      const response = await api.get(`/jobs/download/${assetId}`, {\n        responseType: 'blob'\n      });\n\n      // Crear enlace de descarga\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', `optimizacion_${assetId}.csv`);\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n      window.URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error('Error al descargar resultados:', error);\n      throw error;\n    }\n  },\n  async validarDatos() {\n    const response = await api.get('/optimizacion/validar');\n    return response.data;\n  },\n  /**\r\n   * Llama al endpoint que ejecuta el modelo OPL en Watson Studio y devuelve los resultados reales.\r\n   * Devuelve las tablas resultadoMezclas y resultadoAdicionalGasolinas.\r\n   */\n  async getResultadosWatson() {\n    try {\n      console.log('Solicitando resultados reales de Watson Studio...');\n      const response = await api.get('/optimizacion/resultados-watson');\n      return response.data;\n    } catch (error) {\n      console.error('Error al obtener resultados reales de Watson Studio:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["api","optimizacionService","ejecutarOptimizacion","console","log","response","post","data","success","Error","message","error","obtenerDatosOptimizacion","get","obtenerResultadosOptimizacion","probarConexionWatson","lanzarJob","jobId","status","consultarEstadoJob","obtenerResultadosJob","descargarResultados","assetId","responseType","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","remove","revokeObjectURL","validarDatos","getResultadosWatson"],"sources":["C:/Users/valen/OneDrive/Escritorio/IBM_OIL/frontend/src/services/optimizacionService.ts"],"sourcesContent":["import api from './api';\r\n\r\nexport interface OptimizacionRequest {\r\n  aceites: Array<{\r\n    id: number;\r\n    nombre: string;\r\n    octanaje: number;\r\n    plomo: number;\r\n    costo: number;\r\n    capacidad: number;\r\n  }>;\r\n  gasolinas: Array<{\r\n    id: number;\r\n    nombre: string;\r\n    demanda: number;\r\n    precio: number;\r\n    octanajeMinimo: number;\r\n    plomoMaximo: number;\r\n  }>;\r\n  parametros: {\r\n    costoFijoPorLitro: number;\r\n    produccionMaximaTotal: number;\r\n    penalizacionProduccionExtra: number;\r\n    permitirProduccionExtra: boolean;\r\n  };\r\n}\r\n\r\nexport interface OptimizacionResponse {\r\n  asignaciones: Array<{\r\n    aceiteId: number;\r\n    aceiteNombre: string;\r\n    gasolinaId: number;\r\n    gasolinaNombre: string;\r\n    litros: number;\r\n  }>;\r\n  produccion: Array<{\r\n    gasolinaId: number;\r\n    gasolinaNombre: string;\r\n    litrosProducidos: number;\r\n    demanda: number;\r\n    excedente: number;\r\n    porcentajeCumplimiento: number;\r\n  }>;\r\n  metricas: {\r\n    ingresoTotal: number;\r\n    costoTotal: number;\r\n    beneficioNeto: number;\r\n    litrosExcedentes: number;\r\n    costoExcedentes: number;\r\n  };\r\n  status: 'success' | 'error';\r\n  message?: string;\r\n}\r\n\r\nexport interface ValidacionResponse {\r\n  valido: boolean;\r\n  errores: string[];\r\n}\r\n\r\nexport const optimizacionService = {\r\n  async ejecutarOptimizacion(): Promise<OptimizacionResponse> {\r\n    try {\r\n      console.log('Ejecutando optimización con Watson Studio (modelo OPL)...');\r\n      const response = await api.post('/optimizacion/ejecutar');\r\n      \r\n      if (response.data.success) {\r\n        console.log('Optimización completada exitosamente con Watson Studio');\r\n        return response.data.data;\r\n      } else {\r\n        throw new Error(response.data.message || 'Error en la optimización');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al ejecutar optimización:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async obtenerDatosOptimizacion(): Promise<any> {\r\n    try {\r\n      console.log('Obteniendo datos para optimización desde Cloud Object Storage...');\r\n      const response = await api.get('/optimizacion/datos');\r\n      \r\n      if (response.data.success) {\r\n        return response.data.data;\r\n      } else {\r\n        throw new Error(response.data.message || 'Error al obtener datos');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al obtener datos de optimización:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async obtenerResultadosOptimizacion(): Promise<any> {\r\n    try {\r\n      console.log('Obteniendo resultados de optimización...');\r\n      const response = await api.get('/optimizacion/resultados');\r\n      \r\n      if (response.data.success) {\r\n        return response.data.data;\r\n      } else {\r\n        throw new Error(response.data.message || 'Error al obtener resultados');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al obtener resultados de optimización:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async probarConexionWatson(): Promise<any> {\r\n    try {\r\n      console.log('Probando conexión con Watson Studio...');\r\n      const response = await api.get('/optimizacion/test-conexion');\r\n      \r\n      return {\r\n        success: response.data.success,\r\n        message: response.data.message,\r\n      };\r\n    } catch (error) {\r\n      console.error('Error al probar conexión con Watson Studio:', error);\r\n      return {\r\n        success: false,\r\n        message: 'Error al probar conexión con Watson Studio',\r\n      };\r\n    }\r\n  },\r\n\r\n  async lanzarJob(): Promise<any> {\r\n    try {\r\n      console.log('Lanzando job de optimización en Watson Studio...');\r\n      const response = await api.post('/jobs/launch', {});\r\n      \r\n      return {\r\n        success: response.data.success,\r\n        jobId: response.data.jobId,\r\n        status: response.data.status,\r\n        message: response.data.message,\r\n      };\r\n    } catch (error) {\r\n      console.error('Error al lanzar job:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async consultarEstadoJob(jobId: string): Promise<any> {\r\n    try {\r\n      console.log(`Consultando estado del job: ${jobId}`);\r\n      const response = await api.get(`/jobs/status/${jobId}`);\r\n      \r\n      return {\r\n        jobId: response.data.jobId,\r\n        status: response.data.status,\r\n        message: response.data.message,\r\n      };\r\n    } catch (error) {\r\n      console.error('Error al consultar estado del job:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async obtenerResultadosJob(jobId: string): Promise<any> {\r\n    try {\r\n      console.log(`Obteniendo resultados del job: ${jobId}`);\r\n      const response = await api.get(`/jobs/results/${jobId}`);\r\n      \r\n      if (response.data.success) {\r\n        return response.data.data;\r\n      } else {\r\n        throw new Error(response.data.message || 'Error al obtener resultados del job');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al obtener resultados del job:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async descargarResultados(assetId: string): Promise<void> {\r\n    try {\r\n      console.log(`Descargando resultados: ${assetId}`);\r\n      const response = await api.get(`/jobs/download/${assetId}`, {\r\n        responseType: 'blob',\r\n      });\r\n      \r\n      // Crear enlace de descarga\r\n      const url = window.URL.createObjectURL(new Blob([response.data]));\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.setAttribute('download', `optimizacion_${assetId}.csv`);\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      link.remove();\r\n      window.URL.revokeObjectURL(url);\r\n    } catch (error) {\r\n      console.error('Error al descargar resultados:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async validarDatos(): Promise<ValidacionResponse> {\r\n    const response = await api.get('/optimizacion/validar');\r\n    return response.data;\r\n  },\r\n\r\n  /**\r\n   * Llama al endpoint que ejecuta el modelo OPL en Watson Studio y devuelve los resultados reales.\r\n   * Devuelve las tablas resultadoMezclas y resultadoAdicionalGasolinas.\r\n   */\r\n  async getResultadosWatson(): Promise<any> {\r\n    try {\r\n      console.log('Solicitando resultados reales de Watson Studio...');\r\n      const response = await api.get('/optimizacion/resultados-watson');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error al obtener resultados reales de Watson Studio:', error);\r\n      throw error;\r\n    }\r\n  },\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}